You are given a string s consisting of lowercase English letters, an integer t representing the number of transformations to perform, and an array nums of size 26. In one transformation, every character in s is replaced according to the following rules:
Replace s[i] with the next nums[s[i] - 'a'] consecutive characters in the alphabet. For example, if s[i] = 'a' and nums[0] = 3, the character 'a' transforms into the next 3 consecutive characters ahead of it, which results in "bcd".
The transformation wraps around the alphabet if it exceeds 'z'. For example, if s[i] = 'y' and nums[24] = 3, the character 'y' transforms into the next 3 consecutive characters ahead of it, which results in "zab".
Return the length of the resulting string after exactly t transformations.
Since the answer may be very large, return it modulo 109 + 7.





import java.util.*;
class Solution {
    private static final int MOD = 1_000_000_007;
    public int lengthAfterTransformations(String s, int t, List<Integer> nums) {
        int[][] T = getTransformationMatrix(nums);
        int[][] poweredT = matrixPow(T, t);
        int[] count = new int[26];
        for (char c : s.toCharArray()) {
            count[c - 'a']++;
        }
        long[] lengths = new long[26];
        for (int i = 0; i < 26; ++i) {
            for (int j = 0; j < 26; ++j) {
                lengths[j] = (lengths[j] + (long) count[i] * poweredT[i][j]) % MOD;
            }
        }
        long totalLength = 0;
        for (long len : lengths) {
            totalLength = (totalLength + len) % MOD;
        }

        return (int) totalLength;
    }
    private int[][] getTransformationMatrix(List<Integer> nums) {
        int[][] T = new int[26][26];
        for (int i = 0; i < nums.size(); ++i) {
            int steps = nums.get(i);
            for (int step = 1; step <= steps; ++step) {
                int next = (i + step) % 26;
                T[i][next]++;
            }
        }
        return T;
    }
    private int[][] getIdentityMatrix(int size) {
        int[][] I = new int[size][size];
        for (int i = 0; i < size; ++i) {
            I[i][i] = 1;
        }
        return I;
    }
    private int[][] matrixMult(int[][] A, int[][] B) {
        int size = A.length;
        int[][] C = new int[size][size];
        for (int i = 0; i < size; ++i) {
            for (int k = 0; k < size; ++k) {
                for (int j = 0; j < size; ++j) {
                    C[i][j] = (int) ((C[i][j] + (long) A[i][k] * B[k][j]) % MOD);
                }
            }
        }
        return C;
    }
    private int[][] matrixPow(int[][] M, int n) {
        int size = M.length;
        int[][] result = getIdentityMatrix(size);
        while (n > 0) {
            if ((n & 1) == 1) {
                result = matrixMult(result, M);
            }
            M = matrixMult(M, M);
            n >>= 1;
        }
        return result;
    }
}
