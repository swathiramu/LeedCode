You are given a 0-indexed integer array nums and an integer p. Find p pairs of indices of nums such that the maximum difference amongst all the pairs is minimized. Also, ensure no index appears more than once amongst the p pairs.
Note that for a pair of elements at the index i and j, the difference of this pair is |nums[i] - nums[j]|, where |x| represents the absolute value of x.
Return the minimum maximum difference among all p pairs. We define the maximum of an empty set to be zero.







import java.util.Arrays;

class Solution {
    public int minimizeMax(int[] nums, int p) {
        Arrays.sort(nums);
        
        int low = 0, high = nums[nums.length - 1] - nums[0];
        int ans = high;
        
        while (low <= high) {
            int mid = low + (high - low) / 2;
            
            if (canFormPairs(nums, p, mid)) {
                ans = mid;        
                high = mid - 1;
            } else {
                low = mid + 1;    
            }
        }
        
        return ans;
    }

    private boolean canFormPairs(int[] nums, int p, int maxDiff) {
        int count = 0;
        int i = 0;
        while (i < nums.length - 1) {
            if (Math.abs(nums[i] - nums[i + 1]) <= maxDiff) {
                count++;
                i += 2; 
            } else {
                i++;
            }
            if (count >= p) return true;
        }
        return count >= p;
    }
}


 
